hydra:
  run:
    dir: outputs/${run_name}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - image_path=data/example_images/1.png
    - mask_path=data/example_images/mask2.png
    - data.train_loader.dataset.sigma=0,0.2,0.4,0.6,0.8,1.0
  job:
    name: train_model
    chdir: null
    override_dirname: data.train_loader.dataset.sigma=0,0.2,0.4,0.6,0.8,1.0,image_path=data/example_images/1.png,mask_path=data/example_images/mask2.png
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/ids/wauquiez/code/StageTests
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/ids/wauquiez/code/StageTests/confs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      data: internal
      trainer: internal
      flow_model: internal
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
flow_model:
  _target_: src.internal_flow.flow.InpaintingFlow
  path:
    _target_: src.flows.path.AffinePath
    scheduler:
      _target_: src.flows.schedulers.OTScheduler
  loss_fn:
    _target_: src.flows.losses.MSEFlowMatchingLoss
  cfg:
    _target_: src.flows.types.FlowConfig
    predicts: x_1
    guidance: CFG
    guidance_scale: 1.0
    guided_prob: 1.0
  solver_cfg:
    method: euler
    n_steps: 100
  optimizer_cfg:
    _target_: torch.optim.Adam
    _partial_: true
    lr: 0.0001
    weight_decay: 0.0001
    betas:
    - 0.9
    - 0.999
  viz: ${viz}
  ema_decay: 0.9999
  model:
    _target_: src.internal_flow.model.Model
    n_channels: 32
    output_dim: 3
    in_dim: 4
trainer:
  _target_: pytorch_lightning.Trainer
  log_every_n_steps: 10
  num_sanity_val_steps: 2
  check_val_every_n_epoch: 1
  accelerator: gpu
  devices: auto
  callbacks:
  - _target_: pytorch_lightning.callbacks.TQDMProgressBar
    refresh_rate: 10
    leave: true
  - _target_: pytorch_lightning.callbacks.ModelCheckpoint
    dirpath: checkpoints/
    every_n_train_steps: 100
    filename: '{epoch:02d}-{step:04d}'
    save_last: true
  max_epochs: 40
  precision: bf16-mixed
  accumulate_grad_batches: 8
  gradient_clip_val: 1.0
  deterministic: true
  strategy: ddp
  logger:
  - _target_: pytorch_lightning.loggers.WandbLogger
    project: StageTests
    name: monoimage
    save_dir: wandb/
    log_model: true
data:
  train_loader:
    _target_: torch.utils.data.DataLoader
    batch_size: 240
    num_workers: 8
    pin_memory: true
    dataset:
      _target_: src.internal_flow.data.TrainOverride
      image_path: ${image_path}
      mask_path: ${mask_path}
      seed: ${seed}
      sigma: 0
  test_loader:
    _target_: torch.utils.data.DataLoader
    batch_size: 1
    num_workers: 0
    pin_memory: true
    dataset:
      _target_: src.internal_flow.data.TestOverride
      image_path: ${image_path}
      mask_path: ${mask_path}
      seed: ${seed}
run_name: ${next_version:outputs}
image_path: data/example_images/1.png
mask_path: data/example_images/mask2.png
viz: true
seed: 42
